// auto-generated by make.py
// Here are the unsafe wrappers:
#[link(name = "ic", kind = "static")]
extern "C" {
    pub fn p4nenc8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn p4nenc16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn p4nenc32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4nenc64(inp: *const u64, n: usize, out: *mut u8) -> usize;
    pub fn p4nenc128v16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn p4nenc128v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4nenc128v64(inp: *const u64, n: usize, out: *mut u8) -> usize;
    pub fn p4nenc256v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4nenc256w32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4ndec8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn p4ndec16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn p4ndec32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4ndec64(inp: *const u8, n: usize, out: *mut u64) -> usize;
    pub fn p4ndec128v16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn p4ndec128v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4ndec128v64(inp: *const u8, n: usize, out: *mut u64) -> usize;
    pub fn p4ndec256v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4ndenc8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn p4ndenc16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn p4ndenc32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4ndenc64(inp: *const u64, n: usize, out: *mut u8) -> usize;
    pub fn p4ndenc128v16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn p4ndenc128v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4ndenc256v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4nddec8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn p4nddec16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn p4nddec32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4nddec64(inp: *const u8, n: usize, out: *mut u64) -> usize;
    pub fn p4nddec128v16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn p4nddec128v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4nddec256v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4nddec256w32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4nd1enc8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn p4nd1enc16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn p4nd1enc32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4nd1enc64(inp: *const u64, n: usize, out: *mut u8) -> usize;
    pub fn p4nd1enc128v16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn p4nd1enc128v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4nd1enc256v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4nd1dec8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn p4nd1dec16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn p4nd1dec32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4nd1dec64(inp: *const u8, n: usize, out: *mut u64) -> usize;
    pub fn p4nd1dec128v16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn p4nd1dec128v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4nd1dec256v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4nzenc8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn p4nzenc16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn p4nzenc32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4nzenc64(inp: *const u64, n: usize, out: *mut u8) -> usize;
    pub fn p4nzenc128v16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn p4nzenc128v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4nzenc256v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn p4nzdec8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn p4nzdec16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn p4nzdec32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4nzdec64(inp: *const u8, n: usize, out: *mut u64) -> usize;
    pub fn p4nzdec128v16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn p4nzdec128v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn p4nzdec256v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnpack8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn bitnpack16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn bitnpack32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnpack64(inp: *const u64, n: usize, out: *mut u8) -> usize;
    pub fn bitnpack128v16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn bitnpack128v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnpack128v64(inp: *const u64, n: usize, out: *mut u8) -> usize;
    pub fn bitnpack256v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnunpack8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn bitnunpack16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn bitnunpack32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnunpack64(inp: *const u8, n: usize, out: *mut u64) -> usize;
    pub fn bitnunpack128v16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn bitnunpack128v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnunpack128v64(inp: *const u8, n: usize, out: *mut u64) -> usize;
    pub fn bitnunpack256v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitndpack8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn bitndpack16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn bitndpack32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitndpack64(inp: *const u64, n: usize, out: *mut u8) -> usize;
    pub fn bitndpack128v16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn bitndpack128v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitndpack256v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitndunpack8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn bitndunpack16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn bitndunpack32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitndunpack64(inp: *const u8, n: usize, out: *mut u64) -> usize;
    pub fn bitndunpack128v16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn bitndunpack128v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitndunpack256v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnd1pack8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn bitnd1pack16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn bitnd1pack32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnd1pack64(inp: *const u64, n: usize, out: *mut u8) -> usize;
    pub fn bitnd1pack128v16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn bitnd1pack128v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnd1pack256v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnd1unpack8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn bitnd1unpack16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn bitnd1unpack32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnd1unpack64(inp: *const u8, n: usize, out: *mut u64) -> usize;
    pub fn bitnd1unpack128v16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn bitnd1unpack128v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnd1unpack256v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnfpack8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn bitnfpack16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn bitnfpack32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnfpack64(inp: *const u64, n: usize, out: *mut u8) -> usize;
    pub fn bitnfpack128v16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn bitnfpack128v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnfpack256v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnfunpack8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn bitnfunpack16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn bitnfunpack32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnfunpack64(inp: *const u8, n: usize, out: *mut u64) -> usize;
    pub fn bitnfunpack128v16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn bitnfunpack128v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnfunpack256v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnzpack8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn bitnzpack16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn bitnzpack32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnzpack64(inp: *const u64, n: usize, out: *mut u8) -> usize;
    pub fn bitnzpack128v16(inp: *const u16, n: usize, out: *mut u8) -> usize;
    pub fn bitnzpack128v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnzpack256v32(inp: *const u32, n: usize, out: *mut u8) -> usize;
    pub fn bitnzunpack8(inp: *const u8, n: usize, out: *mut u8) -> usize;
    pub fn bitnzunpack16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn bitnzunpack32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnzunpack64(inp: *const u8, n: usize, out: *mut u64) -> usize;
    pub fn bitnzunpack128v16(inp: *const u8, n: usize, out: *mut u16) -> usize;
    pub fn bitnzunpack128v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
    pub fn bitnzunpack256v32(inp: *const u8, n: usize, out: *mut u32) -> usize;
}
